{"version":3,"sources":["components/Input.jsx","components/Form.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","type","id","title","placeholder","description","onFocus","onBlur","className","htmlFor","aria-describedby","Form","setIsShowFooter","e","map","element","index","key","Home","useState","isShowFooter","setTitel","Fragment","unused","onClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b62a4fcd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Input = ({\r\n  type,\r\n  id,\r\n  title = type,\r\n  placeholder = `Enter ${type}`,\r\n  description = `We'll never share your ${type} with anyone else.`,\r\n  onFocus,\r\n  onBlur\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={id}>{title}</label>\r\n      <input type={type}\r\n        className=\"form-control\" id={id}\r\n        aria-describedby={`${type}Help`}\r\n        placeholder={placeholder}\r\n        onFocus={onFocus}\r\n        onBlur={onBlur}/>\r\n      <small id={`${type}Help`} className=\"form-text text-muted\">{description}</small>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\nimport Input from './Input'\r\n\r\nfunction Form({ setIsShowFooter }) {\r\n  const elements = ['', '', '', '']\r\n  return (\r\n    <form>\r\n      <Input type=\"email\" id=\"email1\" \r\n        onFocus={e => { setIsShowFooter(false) }}\r\n        onBlur={e => { setIsShowFooter(true) }}\r\n      />\r\n      <Input type=\"password\" id=\"password1\" \r\n        onFocus={e => { setIsShowFooter(false) }}\r\n        onBlur={e => { setIsShowFooter(true) }}\r\n      />\r\n      {elements.map((element, index) => (\r\n        <Input key={index} type=\"number\" id={`num${index}`} title=\"Amount of sugar\"\r\n          placeholder=\"Enter number of sugar bags\"\r\n          onFocus={e => { setIsShowFooter(false) }}\r\n          onBlur={e => { setIsShowFooter(true) }}\r\n          description=\"The number of sugar bags that needed to make a cake\" />\r\n      ))}\r\n\r\n      <button type=\"button\" className=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n\r\n","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport Form from '../components/Form'\r\n\r\nfunction Home() {\r\n  const [isShowFooter, setIsShowFooter] = useState(true)\r\n  const [title, setTitel] = useState('Application')\r\n  return (\r\n    <React.Fragment>\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <span className=\"navbar-brand\">\r\n          {title}\r\n        </span>\r\n      </nav>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col\"><br /></div>\r\n          <div className=\"col\"></div>\r\n          <div className=\"w-100\"></div>\r\n          <div className=\"col-12\">\r\n            <Form setIsShowFooter={setIsShowFooter} />\r\n          </div>\r\n        </div>\r\n\r\n        {!isShowFooter ? <br /> : <React.Fragment>\r\n          {[1, 1, 1, 1].map((unused, index) => <br key={index} />)}\r\n\r\n          <nav className=\"footer navbar navbar-default fixed-bottom navbar-light bg-light\">\r\n            <span className=\"navbar-brand\" onClick={() => { setTitel('Home Page') }} >Home</span> |\r\n          <span className=\"navbar-brand\" onClick={() => { setTitel('Album') }} >Album</span> |\r\n          <span className=\"navbar-brand\" onClick={() => { setTitel('New Item') }} >New</span> |\r\n          <span className=\"navbar-brand\" onClick={() => { setTitel('Activity') }} >Activity</span> |\r\n          <span className=\"navbar-brand\" onClick={() => { setTitel('Profile') }} >Profile</span>\r\n          </nav>\r\n        </React.Fragment>\r\n        }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Home\r\n\r\n","import React from 'react';\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <Home />\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}